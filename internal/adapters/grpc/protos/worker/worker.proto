syntax = "proto3";

package worker;

option go_package = "dev.rubentxu.devops-platform/adapters/grpc/protos/worker";

// Servicio en el Worker que el WorkerManager invoca para ejecutar o terminar procesos.
service WorkerProcessService {
  // Streaming bidireccional: Manager env√≠a ExecuteCommandRequest, Worker responde con CommandOutput
  rpc ExecuteCommand(stream ExecuteCommandRequest) returns (stream CommandOutput);

  rpc TerminateProcess(TerminateProcessRequest) returns (TerminateProcessResponse);

  // HealthCheck en streaming (el manager se conecta y escucha actualizaciones)
  rpc HealthCheck(stream HealthCheckRequest) returns (stream HealthCheckResponse);

  // ReportMetrics en streaming (el manager se conecta y escucha metrics)
  rpc ReportMetrics(stream MetricsRequest) returns (stream MetricsResponse);

  rpc SyncFiles(SyncRequest) returns (stream SyncResponse); // Nuevo servicio para rsync
}

message ExecuteCommandRequest {
  string process_id = 1;
  repeated string command = 2;
  string working_dir = 3;
  map<string, string> env_vars = 4;
}

message CommandOutput {
  string process_id = 1;
  bool is_stderr = 2;
  string content = 3;
  string state = 4;
  int32 exit_code = 5;
  string error_msg = 6;
}

message TerminateProcessRequest {
  string process_id = 1;
}

message TerminateProcessResponse {
  bool success = 1;
  string message = 2;
}

message HealthCheckRequest {
  string worker_id = 1;
}

message HealthCheckResponse {
  bool is_healthy = 1;
  string status = 2;
}

message MetricsRequest {
  string worker_id = 1;
}

message MetricsResponse {
  string cpu_usage = 1;
  string mem_usage = 2;
  string disk_usage = 3;
}

message SyncRequest {
  string source_path = 1;
  string destination_path = 2;
  bool recursive = 3;
  bool delete = 4;
}

message SyncResponse {
  string output = 1;
  bool is_error = 2;
}